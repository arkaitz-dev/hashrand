const s="/api";class a extends Error{constructor(e,n){super(e),this.status=n,this.name="ApiError"}get statusCode(){return this.status}}async function o(t){if(!t.ok){const n=await t.text();throw new a(n||`HTTP ${t.status}`,t.status)}return t.headers.get("content-type")?.includes("application/json")?await t.json():t.text()}async function r(t){if(!t.ok){const e=await t.text();throw new a(e||`HTTP ${t.status}`,t.status)}return t.json()}const i={async generate(t){const e=new URLSearchParams;t.length!==void 0&&e.set("length",t.length.toString()),t.alphabet&&e.set("alphabet",t.alphabet),t.prefix&&e.set("prefix",t.prefix),t.suffix&&e.set("suffix",t.suffix),t.raw&&e.set("raw","true");const n=await fetch(`${s}/custom?${e}`);return o(n)},async generatePassword(t){const e=new URLSearchParams;t.length!==void 0&&e.set("length",t.length.toString()),t.alphabet&&e.set("alphabet",t.alphabet),t.raw&&e.set("raw","true");const n=await fetch(`${s}/password?${e}`);return o(n)},async generateApiKey(t){const e=new URLSearchParams;t.length!==void 0&&e.set("length",t.length.toString()),t.alphabet&&e.set("alphabet",t.alphabet),t.raw&&e.set("raw","true");const n=await fetch(`${s}/api-key?${e}`);return o(n)},async getVersion(){const t=await fetch(`${s}/version`);return r(t)},async generateWithSeed(t){const e=await fetch(`${s}/custom`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok){const n=await e.text();throw new a(n||`HTTP ${e.status}`,e.status)}return e.json()},async generatePasswordWithSeed(t){const e=await fetch(`${s}/password`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok){const n=await e.text();throw new a(n||`HTTP ${e.status}`,e.status)}return e.json()},async generateApiKeyWithSeed(t){const e=await fetch(`${s}/api-key`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok){const n=await e.text();throw new a(n||`HTTP ${e.status}`,e.status)}return e.json()}};export{a as ApiError,i as api};
