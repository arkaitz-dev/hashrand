const r="/api";class s extends Error{constructor(e,n){super(e),this.status=n,this.name="ApiError"}}async function a(t){if(!t.ok){const e=await t.text();throw new s(e||`HTTP ${t.status}`,t.status)}return t.text()}async function i(t){if(!t.ok){const e=await t.text();throw new s(e||`HTTP ${t.status}`,t.status)}return t.json()}const o={async generate(t){const e=new URLSearchParams;t.length!==void 0&&e.set("length",t.length.toString()),t.alphabet&&e.set("alphabet",t.alphabet),t.prefix&&e.set("prefix",t.prefix),t.suffix&&e.set("suffix",t.suffix),t.raw&&e.set("raw","true");const n=await fetch(`${r}/generate?${e}`);return a(n)},async generatePassword(t){const e=new URLSearchParams;t.length!==void 0&&e.set("length",t.length.toString()),t.alphabet&&e.set("alphabet",t.alphabet),t.raw&&e.set("raw","true");const n=await fetch(`${r}/password?${e}`);return a(n)},async generateApiKey(t){const e=new URLSearchParams;t.length!==void 0&&e.set("length",t.length.toString()),t.alphabet&&e.set("alphabet",t.alphabet),t.raw&&e.set("raw","true");const n=await fetch(`${r}/api-key?${e}`);return a(n)},async getVersion(){const t=await fetch(`${r}/version`);return i(t)}};export{s as ApiError,o as api};
