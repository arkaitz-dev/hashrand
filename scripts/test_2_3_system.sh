#!/bin/bash

# Test completo del sistema 2/3 token refresh con debug
echo "üß™ TEST COMPLETO: Sistema 2/3 Token Refresh"
echo "============================================="
echo ""

# Configuraci√≥n
API_BASE="http://localhost:3000"
COOKIES_FILE="cookies_test.txt"

# Paso 1: Generar keypair Ed25519
echo "üîê Paso 1: Generando keypair Ed25519..."
PUB_KEY=$(node scripts/generate_hash.js)
echo "‚úÖ Public key generada: $PUB_KEY"

# Paso 2: Crear firma Ed25519
echo ""
echo "üîè Paso 2: Firmando payload..."
EMAIL="me@arkaitz.dev"
# Crear mensaje: email + pub_key + next (next defaults to "/")
MESSAGE="${EMAIL}${PUB_KEY}/"
SIGNATURE=$(node scripts/sign_payload.js "$MESSAGE")
echo "‚úÖ Signature generada: ${SIGNATURE:0:40}..."

# Paso 3: Solicitar magic link con Ed25519
echo ""
echo "üìß Paso 3: Solicitando magic link con Ed25519..."
MAGIC_RESPONSE=$(curl -s -c $COOKIES_FILE -X POST \
  -H "Content-Type: application/json" \
  -d "{\"email\":\"$EMAIL\",\"email_lang\":\"en\",\"ui_host\":\"$API_BASE\",\"pub_key\":\"$PUB_KEY\",\"signature\":\"$SIGNATURE\"}" \
  $API_BASE/api/login/)

if [ "$MAGIC_RESPONSE" = '{"status":"OK"}' ]; then
    echo "‚úÖ Magic link solicitado exitosamente"

    # Extraer magic token del √∫ltimo log
    echo ""
    echo "üîç Paso 4: Extrayendo magic token del log m√°s reciente..."

    # Verificar que el log existe y contiene magic links
    if [ ! -f ".spin-dev.log" ]; then
        echo "‚ùå ERROR: Archivo .spin-dev.log no existe"
        exit 1
    fi

    # Buscar magic link en log con m√°s debug
    MAGIC_LINE=$(tail -n 50 .spin-dev.log | grep "Generated magic_link\|üîó.*magiclink=" | tail -n 1)
    echo "   L√≠nea encontrada en log: $MAGIC_LINE"

    MAGIC_TOKEN=$(echo "$MAGIC_LINE" | grep -o 'magiclink=[^&]*' | cut -d '=' -f 2)

    if [ -n "$MAGIC_TOKEN" ] && [ ${#MAGIC_TOKEN} -gt 10 ]; then
        echo "‚úÖ Magic token extra√≠do: ${MAGIC_TOKEN:0:40}..."
        echo "   Longitud: ${#MAGIC_TOKEN} caracteres"

        # Paso 5: Validar magic link (pub_key se extrae autom√°ticamente del payload almacenado)
        echo ""
        echo "üîë Paso 5: Validando magic link..."
        LOGIN_RESPONSE=$(curl -s -b $COOKIES_FILE -c $COOKIES_FILE \
          "$API_BASE/api/login/?magiclink=${MAGIC_TOKEN}")

        echo "Response: $LOGIN_RESPONSE"

        if echo "$LOGIN_RESPONSE" | grep -q '"access_token"'; then
            ACCESS_TOKEN=$(echo "$LOGIN_RESPONSE" | grep -o '"access_token":"[^"]*"' | sed 's/"access_token":"\([^"]*\)"/\1/')
            echo ""
            echo "‚úÖ ¬°LOGIN EXITOSO!"
            echo "   Access Token: ${ACCESS_TOKEN:0:40}..."

            # Verificar cookies CR√çTICO
            echo ""
            echo "üç™ Verificando cookies de refresh token..."
            if grep -q "refresh_token" $COOKIES_FILE; then
                REFRESH_COOKIE_LINE=$(cat $COOKIES_FILE | grep -v "^#" | grep refresh_token)
                echo "‚úÖ Refresh token cookie encontrada:"
                echo "   $REFRESH_COOKIE_LINE"
                # Extraer timestamp de expiraci√≥n para verificar duraci√≥n
                COOKIE_EXPIRY=$(echo "$REFRESH_COOKIE_LINE" | awk '{print $5}')
                CURRENT_TIMESTAMP=$(date +%s)
                EXPIRY_DIFF=$((COOKIE_EXPIRY - CURRENT_TIMESTAMP))
                if [ $EXPIRY_DIFF -gt 0 ]; then
                    echo "   Expira en: $EXPIRY_DIFF segundos (~$((EXPIRY_DIFF/60)) minutos)"
                else
                    echo "   Cookie expiry timestamp: $COOKIE_EXPIRY (formato v√°lido)"
                fi
            else
                echo "‚ùå ERROR CR√çTICO: No se encontr√≥ cookie de refresh token"
                echo "   Contenido completo del archivo cookies:"
                cat $COOKIES_FILE
                exit 1
            fi

            # Test inmediato
            echo ""
            echo "üß™ Test 1: API call inmediata (t=0s) - debe funcionar sin refresh"
            API_RESPONSE=$(curl -s -b $COOKIES_FILE -c $COOKIES_FILE \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              $API_BASE/api/custom?length=8)

            if echo "$API_RESPONSE" | grep -q '"hash"'; then
                echo "‚úÖ Test 1 exitoso - Hash generado: $(echo "$API_RESPONSE" | grep -o '"hash":"[^"]*"' | cut -d '"' -f 4)"
            else
                echo "‚ùå Test 1 fall√≥: $API_RESPONSE"
                exit 1
            fi

            # Test 2: Verificar refresh por access token expirado (1 minuto)
            WAIT_TIME_ACCESS=62
            echo ""
            echo "‚è∞ Test 2A: Esperando $WAIT_TIME_ACCESS segundos para verificar refresh por access token expirado..."
            sleep $WAIT_TIME_ACCESS

            echo ""
            echo "üî• TEST 2A: Refresh por ACCESS TOKEN expirado despu√©s de ${WAIT_TIME_ACCESS}s"
            echo "========================================="
            echo "   ‚Ä¢ El access token DEBE estar expirado (>${WAIT_TIME_ACCESS}s > 60s)"
            echo "   ‚Ä¢ El refresh token DEBE estar v√°lido (9 minutos desde creaci√≥n)"
            echo "   ‚Ä¢ El middleware DEBE detectar token expirado y hacer refresh"
            echo ""

            # VERIFICACI√ìN CR√çTICA: Asegurar que las cookies existen antes del test
            echo "üîç Verificaci√≥n pre-test: Cookies disponibles para refresh autom√°tico"
            if [ ! -f "$COOKIES_FILE" ]; then
                echo "‚ùå ERROR: Archivo de cookies no existe"
                exit 1
            fi
            if ! grep -q "refresh_token" $COOKIES_FILE; then
                echo "‚ùå ERROR: No hay refresh token en cookies antes del test cr√≠tico"
                cat $COOKIES_FILE
                exit 1
            fi
            echo "‚úÖ Cookies verificadas, procediendo con test cr√≠tico..."
            echo ""

            # Test cr√≠tico con headers completos
            echo "üì§ Enviando request con:"
            echo "   ‚Ä¢ Access token expirado (${WAIT_TIME}s > 60s): ${ACCESS_TOKEN:0:20}..."
            echo "   ‚Ä¢ Cookies de refresh token: S√ç"
            echo ""
            API_RESPONSE=$(curl -s -i -b $COOKIES_FILE -c $COOKIES_FILE \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              $API_BASE/api/custom?length=12)

            echo "=== RESPONSE COMPLETA ==="
            echo "$API_RESPONSE"
            echo "========================"
            echo ""

            # VERIFICACI√ìN ULTRATHINK: ¬øHay respuesta v√°lida?
            if [ -z "$API_RESPONSE" ] || [ ${#API_RESPONSE} -lt 10 ]; then
                echo "‚ùå ERROR CR√çTICO: Respuesta vac√≠a o demasiado corta del servidor"
                echo "   Verificando conectividad con servidor..."
                curl -s "$API_BASE/api/version" || echo "   ‚ùå Servidor no responde"
                exit 1
            fi

            # ¬øContiene cabeceras HTTP v√°lidas?
            if ! echo "$API_RESPONSE" | head -n 1 | grep -q "HTTP/1.1"; then
                echo "‚ùå ERROR: Respuesta no contiene cabeceras HTTP v√°lidas"
                echo "   Primera l√≠nea: $(echo "$API_RESPONSE" | head -n 1)"
                exit 1
            fi

            # An√°lisis de la respuesta
            if echo "$API_RESPONSE" | grep -q "HTTP/1.1 200"; then
                echo "‚úÖ Status: 200 OK"
                if echo "$API_RESPONSE" | grep -q "x-new-access-token:"; then
                    NEW_TOKEN=$(echo "$API_RESPONSE" | grep "x-new-access-token:" | cut -d' ' -f2 | tr -d '\r')
                    echo "üîÑ ¬°SISTEMA 2/3 FUNCIONANDO!"
                    echo "   ‚Ä¢ Token renovado autom√°ticamente: ${NEW_TOKEN:0:40}..."

                    # VERIFICACI√ìN ULTRATHINK: ¬øSe actualiz√≥ tambi√©n el refresh token?
                    if echo "$API_RESPONSE" | grep -q "set-cookie.*refresh_token"; then
                        echo "   ‚Ä¢ Refresh token tambi√©n renovado: ‚úÖ"
                    else
                        echo "   ‚Ä¢ Refresh token NO renovado: ‚ö†Ô∏è"
                    fi

                    # ¬øEl hash se gener√≥ correctamente con el nuevo token?
                    if echo "$API_RESPONSE" | grep -q '"hash"'; then
                        HASH=$(echo "$API_RESPONSE" | grep -o '"hash":"[^"]*"' | cut -d '"' -f 4)
                        echo "   ‚Ä¢ Hash generado con nuevo token: $HASH ‚úÖ"
                    else
                        echo "   ‚Ä¢ ERROR: No se gener√≥ hash con nuevo token ‚ùå"
                    fi

                    echo "‚úÖ Test 2 EXITOSO - Refresh autom√°tico funciona correctamente"
                else
                    echo "‚ö†Ô∏è  Status 200 pero sin headers de renovaci√≥n"
                    echo "   Verificando si el hash se gener√≥ correctamente..."
                    if echo "$API_RESPONSE" | grep -q '"hash"'; then
                        HASH=$(echo "$API_RESPONSE" | grep -o '"hash":"[^"]*"' | cut -d '"' -f 4)
                        echo "   Hash generado: $HASH (token a√∫n v√°lido?)"
                    fi
                fi
            else
                echo "‚ùå Test 2 FALL√ì:"
                echo "   Status: $(echo "$API_RESPONSE" | head -n 1)"
                if echo "$API_RESPONSE" | grep -q "401"; then
                    echo "   ‚ùå PROBLEMA: El sistema 2/3 NO est√° funcionando"
                    echo "   ‚ùå El middleware no est√° haciendo refresh autom√°tico"
                fi
            fi

        else
            echo "‚ùå Error en validaci√≥n: $LOGIN_RESPONSE"
            exit 1
        fi
    else
        echo "‚ùå No se pudo extraer magic token del log"
        exit 1
    fi
else
    echo "‚ùå Error solicitando magic link: $MAGIC_RESPONSE"
    exit 1
fi

echo ""
echo "üìä Test completado. Revisa logs con debug para diagn√≥stico:"
echo "   tail -f .spin-dev.log | grep DEBUG"